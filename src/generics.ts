// ------------------------------
// üîπ FUN√á√ÉO GEN√âRICA
// ------------------------------

// A fun√ß√£o 'returnValue' recebe um valor de tipo gen√©rico 'T' e retorna esse mesmo valor.
// '<T>' indica que 'T' √© um tipo gen√©rico que ser√° definido na hora da chamada da fun√ß√£o.
const returnValue = <T>(value: T): T => value;

// Ao chamar a fun√ß√£o, podemos especificar o tipo:
// Aqui, 'T' ser√° 'string'
const message = returnValue<string>("Hello World");

// Aqui, 'T' ser√° 'number'
const count = returnValue<number>(5);

// ------------------------------
// üîπ FUN√á√ÉO GEN√âRICA COM ARRAY
// ------------------------------

// Fun√ß√£o que recebe um array de elementos gen√©ricos 'Type' e retorna o primeiro elemento.
// Isso permite que a fun√ß√£o funcione com qualquer tipo de array (strings, n√∫meros, objetos, etc.)
function getFirstValueFromArray<Type>(array: Type[]) {
  return array[0];
}

// Chamando a fun√ß√£o para array de strings
const firstValueFromStringArray = getFirstValueFromArray<string>(["1", "2"]);

// Chamando a fun√ß√£o para array de n√∫meros
const firstValueFromNumberArray = getFirstValueFromArray<number>([10, 20]);

// ------------------------------
// üîπ PROMISE TIPADA
// ------------------------------

// Fun√ß√£o ass√≠ncrona que retorna uma Promise de string.
// ': Promise<string>' indica o tipo do valor que ser√° resolvido pela Promise
const returnPromise = async (): Promise<string> => {
  return "5";
};

// ------------------------------
// üîπ CLASSE GEN√âRICA
// ------------------------------

// Classe gen√©rica que trabalha com qualquer tipo 'T'.
// Isso permite que a mesma classe funcione com n√∫meros, strings ou objetos.
class GeneticNmber<T> {
  zeroValue: T; // valor inicial do tipo gen√©rico
  sum: (x: T, y: T) => T; // fun√ß√£o que recebe dois valores do tipo T e retorna T

  constructor(zeroValue: T, sum: (x: T, y: T) => T) {
    this.zeroValue = zeroValue;
    this.sum = sum;
  }
}

// Criando uma inst√¢ncia da classe gen√©rica com tipo 'number'
// zeroValue = 0, sum = fun√ß√£o que soma dois n√∫meros
const myGenericNumber = new GeneticNmber<number>(0, (x: number, y: number) => {
  return x + y;
});

// ----------------------------------------
// Conceitos principais explicados:

// Conceito:        	    Explica√ß√£o
// Generics <T>	          Permite criar fun√ß√µes ou classes que funcionam com qualquer tipo, mantendo a tipagem segura.
// Fun√ß√µes gen√©ricas	    Usadas quando voc√™ quer que a fun√ß√£o aceite e retorne diferentes tipos sem perder a tipagem.
// Classes gen√©ricas	    Permitem que a mesma classe funcione com tipos variados, mantendo consist√™ncia e evitando duplica√ß√£o.
// Promises tipadas	      Indica o tipo do valor que a Promise vai resolver (ex: Promise<string>).
