// ------------------------------
// üîπ INTERFACE
// ------------------------------

// Define um "contrato" que toda classe que a implementar precisa seguir.
// Aqui, qualquer classe que implemente IPerson deve ter:
// - uma propriedade 'id' do tipo number
// - um m√©todo 'sayMyName' que retorna uma string
interface IPerson {
  id: number;
  sayMyName(): string;
}

// ------------------------------
// üîπ CLASSE IMPLEMENTANDO UMA INTERFACE
// ------------------------------

// A classe 'Person' implementa a interface 'IPerson',
// ent√£o ela √© obrigada a possuir as propriedades e m√©todos declarados na interface.
class Person implements IPerson {
  // üî∏ 'readonly' ‚Üí o valor s√≥ pode ser atribu√≠do no construtor; n√£o pode ser alterado depois.
  readonly id: number;

  // üî∏ 'protected' ‚Üí a propriedade pode ser acessada dentro da classe e por subclasses (herdeiras),
  // mas n√£o fora delas.
  protected name: string;

  // üî∏ 'private' ‚Üí a propriedade s√≥ pode ser acessada dentro desta classe.
  private age: number;

  // O construtor √© executado ao criar um novo objeto da classe.
  // Ele inicializa os valores de 'id', 'name' e 'age'.
  constructor(id: number, name: string, age: number) {
    this.id = id;
    this.name = name;
    this.age = age;
  }

  // Implementa√ß√£o do m√©todo obrigat√≥rio da interface.
  // Retorna o nome da pessoa.
  sayMyName(): string {
    return this.name;
  }
}

// ------------------------------
// üîπ REESCRITA MAIS ENXUTA DA MESMA CLASSE
// ------------------------------

// O TypeScript permite declarar e inicializar propriedades diretamente no construtor.
// Isso evita repeti√ß√£o e deixa o c√≥digo mais limpo.
class PersonRefact {
  constructor(
    readonly id: number, // equivale a declarar 'readonly id: number;' e 'this.id = id;'
    protected name: string, // equivale a declarar 'protected name: string;' e 'this.name = name;'
    private age: number // equivale a declarar 'private age: number;' e 'this.age = age;'
  ) {}
  // O construtor j√° cria e atribui os valores automaticamente.
}

// ------------------------------
// üîπ HERAN√áA (EXTENDS)
// ------------------------------

// A classe 'Employee' herda ('extends') tudo de 'Person'.
// Ou seja, ela tem acesso aos atributos e m√©todos p√∫blicos e protegidos da classe pai.
class Employee extends Person {
  // O construtor da subclasse deve chamar o construtor da classe base com 'super(...)'
  constructor(id: number, name: string, age: number) {
    super(id, name, age); // 'super' chama o construtor da classe pai (Person)
  }
}

// ------------------------------
// üîπ INST√ÇNCIA DE CLASSE
// ------------------------------

// Cria um novo objeto da classe 'Person'.
// O 'new' chama o construtor e atribui os valores passados.
const felipe = new Person(1, "Felipe", 23);

//  ---------------------------------------------
// Resumo dos conceitos importantes:

// Conceito:	            Explica√ß√£o:
// interface	            Define um contrato que as classes devem seguir (m√©todos e propriedades obrigat√≥rias).
// implements	            Faz uma classe ‚Äúseguir‚Äù o contrato definido por uma interface.
// extends	              Indica heran√ßa ‚Äî a classe filha herda os membros da classe pai.
// readonly	              Propriedade que s√≥ pode ser atribu√≠da no construtor (n√£o pode ser alterada depois).
// private	              Propriedade acess√≠vel somente dentro da pr√≥pria classe.
// protected	            Propriedade acess√≠vel na classe e em suas subclasses.
// public (padr√£o)	      Propriedade acess√≠vel de qualquer lugar.
// super	                Chama o construtor (ou m√©todos) da classe pai dentro da subclasse.
