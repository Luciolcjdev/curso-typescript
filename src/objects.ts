// ------------------------------
// üîπ TYPE ALIAS (apelidos de tipos)
// ------------------------------

// O tipo 'Order' define a estrutura de um pedido.
type Order = {
  productId: string; // ID do produto
  price: number; // pre√ßo do produto
};

// O tipo 'User' define a estrutura de um usu√°rio.
type User = {
  firstName: string; // nome do usu√°rio
  age: number; // idade
  email: string; // e-mail
  password?: string; // senha opcional (o '?' indica que pode n√£o existir)
  orders: Order[]; // lista de pedidos do usu√°rio, baseada no tipo Order
  register(): string; // m√©todo obrigat√≥rio que retorna uma string
};

// Cria√ß√£o de um objeto que implementa o tipo 'User'
const user: User = {
  firstName: "John",
  age: 20,
  email: "john@gmail.com",
  orders: [{ productId: "1", price: 100 }],
  register() {
    return "a";
  },
};

// Fun√ß√£o simples que recebe uma string.
// ‚ö†Ô∏è Aqui h√° um erro l√≥gico: dentro da fun√ß√£o, ela chama a si mesma recursivamente sem condi√ß√£o de parada.
const login = (message: string) => {
  // O operador '!' indica para o TypeScript que 'password' n√£o √© undefined.
  login(user.password!);
};

// ------------------------------
// üîπ UNION & INTERSECTION TYPES
// ------------------------------

// O tipo 'Author' define um autor que possui uma lista de livros.
type Author = {
  books: string[];
};

// Aqui √© feita uma INTERSE√á√ÉO entre Author e User.
// Isso significa que o objeto 'author' deve conter TODAS as propriedades de Author E User.
const author: Author & User = {
  age: 45,
  books: ["6"],
  email: "John@huji.com",
  firstName: "Renato",
  orders: [],
  register() {
    return "a";
  },
};

// ------------------------------
// üîπ INTERFACES
// ------------------------------

// As interfaces tamb√©m definem contratos de tipos, assim como 'type'.
// Mas elas s√£o mais usadas para objetos e podem ser estendidas (heran√ßa de interfaces).

interface UserInterface {
  readonly firstName: string; // 'readonly' significa que n√£o pode ser alterado ap√≥s ser definido
  email: string;
  login(): string; // m√©todo que retorna uma string
}

// Cria√ß√£o de um objeto que implementa a interface 'UserInterface'
const emailUser: UserInterface = {
  email: "felipe@gmail.com",
  firstName: "Felipe",
  login() {
    return "felipe";
  },
};

// Interface separada que define um autor
interface AuthorInterface {
  books: string[];
}

// INTERSE√á√ÉO de duas interfaces usando '&'
// O objeto precisa seguir o contrato de ambas as interfaces.
const newAuthor: UserInterface & AuthorInterface = {
  email: "lucio@gtr.com",
  firstName: "Lucio",
  books: [],
  login() {
    return "lucio";
  },
};

// Resumo dos conceitos:

// type ‚Üí cria apelidos de tipos (usado para objetos, unions, intersections, etc).

// interface ‚Üí define contratos para objetos e classes (pode ser estendida).

// ? ‚Üí torna uma propriedade opcional.

// readonly ‚Üí impede a modifica√ß√£o da propriedade.

// & ‚Üí interse√ß√£o (une tipos, exigindo que o objeto cumpra todos).

// | ‚Üí uni√£o (aceita um tipo ou outro).

// ! ‚Üí non-null assertion, diz ao TS que algo n√£o √© null nem undefined.
